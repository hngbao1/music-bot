const emojiRegex = require("emoji-regex");
const urlRegex = require("url-regex-safe");

class TextProcessor {
  static processEmoticons(text) {
    // X·ª≠ l√Ω c√°c emoticon theo ki·ªÉu Google Assistant
    const complexEmoticons = {
      // C√°c emoticon ƒë·∫∑c bi·ªát
      ":v": "m·∫∑t c∆∞·ªùi h√° mi·ªáng",
      ":V": "m·∫∑t c∆∞·ªùi h√° mi·ªáng",
      ":3": "m·∫∑t m√®o",
      ">:<": "m·∫∑t t·ª©c gi·∫≠n",
      uwu: "m·∫∑t ƒë√°ng y√™u",
      owo: "m·∫∑t ng·∫°c nhi√™n",
      "<3": "h√¨nh tr√°i tim",
      "</3": "h√¨nh tr√°i tim tan v·ª°",
      ":p": "m·∫∑t l√® l∆∞·ª°i",
      ":P": "m·∫∑t l√® l∆∞·ª°i",
      T_T: "m·∫∑t kh√≥c",
      "T.T": "m·∫∑t kh√≥c",
      ";-;": "m·∫∑t bu·ªìn",
      "-.-": "m·∫∑t ch√°n",
      "-_-": "m·∫∑t ch√°n",
    };

    // Thay th·∫ø emoticon ƒë·∫∑c bi·ªát
    Object.entries(complexEmoticons).forEach(([emoticon, meaning]) => {
      const escapedEmoticon = emoticon.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      const regex = new RegExp(escapedEmoticon, "g");
      text = text.replace(regex, meaning);
    });

    // X·ª≠ l√Ω m·∫∑t c∆∞·ªùi/bu·ªìn
    const patterns = [
      {
        regex: /[:=]\){5,}/g,
        replacement: "m·∫∑t c∆∞·ªùi l·ªõn",
      },
      {
        regex: /[:=]\){3,4}/g,
        replacement: "m·∫∑t c∆∞·ªùi h√†i",
      },
      {
        regex: /[:=]\){1,2}/g,
        replacement: "m·∫∑t c∆∞·ªùi",
      },
      {
        regex: /[:=]\({4,}/g,
        replacement: "m·∫∑t r·∫•t bu·ªìn",
      },
      {
        regex: /[:=]\({2,3}/g,
        replacement: "m·∫∑t bu·ªìn",
      },
      {
        regex: /[:=]\(/g,
        replacement: "m·∫∑t bu·ªìn",
      },
    ];

    // √Åp d·ª•ng c√°c pattern
    patterns.forEach(({ regex, replacement }) => {
      text = text.replace(regex, replacement);
    });

    return text;
  }

  static cleanText(text) {
    // X·ª≠ l√Ω emoticon tr∆∞·ªõc
    text = this.processEmoticons(text);

    // X√≥a custom emoji Discord (format <:name:id>)
    text = text.replace(/<a?:\w+:\d+>/g, "");

    // Thay th·∫ø emoji Unicode theo ki·ªÉu Google Assistant
    const emojiRx = emojiRegex();
    text = text.replace(emojiRx, (match) => {
      const emojiMap = {
        "üëç": "h√¨nh ng√≥n tay c√°i",
        "‚ù§Ô∏è": "h√¨nh tr√°i tim",
        "üòä": "m·∫∑t c∆∞·ªùi",
        "üòÇ": "m·∫∑t c∆∞·ªùi ra n∆∞·ªõc m·∫Øt",
        "üò¢": "m·∫∑t kh√≥c",
        "üò≠": "m·∫∑t kh√≥c l·ªõn",
        "üòç": "m·∫∑t c∆∞·ªùi v·ªõi m·∫Øt h√¨nh tr√°i tim",
        "ü•∞": "m·∫∑t c∆∞·ªùi v·ªõi ba tr√°i tim",
        "üòé": "m·∫∑t c∆∞·ªùi ƒëeo k√≠nh r√¢m",
        "ü§î": "m·∫∑t ƒëang suy nghƒ©",
        // Th√™m c√°c emoji kh√°c n·∫øu c·∫ßn
      };
      return emojiMap[match] || "";
    });

    // X·ª≠ l√Ω URL - c√≥ th·ªÉ ƒë·ªçc t√™n mi·ªÅn ho·∫∑c b·ªè qua
    text = text.replace(urlRegex(), (url) => {
      try {
        const domain = new URL(url).hostname;
        return `li√™n k·∫øt ${domain}`;
      } catch {
        return "li√™n k·∫øt";
      }
    });

    // X·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
    text = text
      .replace(/\*\*(.*?)\*\*/g, "$1") // Bold markup
      .replace(/\*(.*?)\*/g, "$1") // Italic markup
      .replace(/~~(.*?)~~/g, "$1") // Strikethrough
      .replace(/`(.*?)`/g, "$1") // Code markup
      .replace(/\n/g, ". ") // Newlines
      .replace(/\s+/g, " ") // Multiple spaces
      .trim();

    // S·ª≠a m·ªôt s·ªë l·ªói ch√≠nh t·∫£ ph·ªï bi·∫øn
    const spellingFixes = {
      ko: "kh√¥ng",
      chs: "ch∆°i",
      k: "kh√¥ng",
      kh: "kh√¥ng",
      dc: "ƒë∆∞·ª£c",
      ƒëc: "ƒë∆∞·ª£c",
      dk: "ƒë∆∞·ª£c",
      dky: "ƒëƒÉng k√Ω",
      cs: "c√≥",
      ng: "ng∆∞·ªùi",
      m: "m√†y",
      t: "tao",
      r: "r·ªìi",
      chx: "ch∆∞a",
      ntn: "nh∆∞ th·∫ø n√†o",
      clg: "c√°i l√¥ng g√¨",
      vs: "v·ªõi",
      cx: "c≈©ng",
      // Th√™m c√°c t·ª´ vi·∫øt t·∫Øt kh√°c
    };

    // √Åp d·ª•ng s·ª≠a l·ªói ch√≠nh t·∫£
    text = text
      .split(" ")
      .map((word) => {
        return spellingFixes[word.toLowerCase()] || word;
      })
      .join(" ");

    return text;
  }

  static preprocessMessage(message, rawText) {
    // S·ª≠ d·ª•ng tr·ª±c ti·∫øp rawText ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω t·ª´ args
    let text = this.cleanText(rawText || "");

    // T·ªëi ∆∞u chu·ªói c·∫£m x√∫c l·∫∑p l·∫°i
    text = text.replace(/\*([^*]+)\*\s*\*\1\*/g, "*$1*");

    const displayName = message.member.displayName;

    // X·ª≠ l√Ω mentions nh∆∞ c≈©
    message.mentions.users.forEach((user) => {
      const member = message.guild.members.cache.get(user.id);
      const mentionRegex = new RegExp(`<@!?${user.id}>`, "g");
      text = text.replace(mentionRegex, member?.displayName || user.username);
    });

    message.mentions.roles.forEach((role) => {
      const roleRegex = new RegExp(`<@&${role.id}>`, "g");
      text = text.replace(roleRegex, `vai tr√≤ ${role.name}`);
    });

    message.mentions.channels.forEach((channel) => {
      const channelRegex = new RegExp(`<#${channel.id}>`, "g");
      text = text.replace(channelRegex, `k√™nh ${channel.name}`);
    });

    return {
      speakerName: displayName,
      processedText: text,
    };
  }
}

module.exports = { TextProcessor };
